name: Build and Release FileGuard

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths:
    - 'src/**'
  pull_request:
    branches:
    - main
    paths: 
    - 'src/**'

env:
  DOCKER_IMAGE: coderholic/fileguard

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version calculation
        
    - name: Calculate version
      id: version
      run: |
        # Get the number of commits
        COMMIT_COUNT=$(git rev-list --count HEAD)
        
        # Get the short commit hash
        SHORT_SHA=$(git rev-parse --short HEAD)
        
        # Get current date
        DATE=$(date +'%Y%m%d')
        
        # Create version in format: 1.1.COMMIT_COUNT
        VERSION="1.1.$COMMIT_COUNT"
        
        # Create tag with date and short SHA
        TAG="v$VERSION-$DATE-$SHORT_SHA"
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Tag: $TAG"

  build-binary:
    needs: calculate-version
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore src/FileGuard/FileGuard.csproj
      
    - name: Build for Linux x64
      run: |
        dotnet publish src/FileGuard/FileGuard.csproj \
          -c Release \
          -r linux-x64 \
          --self-contained true \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -o ./publish/linux-x64
          
    - name: Build for Windows x64
      run: |
        dotnet publish src/FileGuard/FileGuard.csproj \
          -c Release \
          -r win-x64 \
          --self-contained true \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -o ./publish/win-x64
          
    - name: Build for macOS x64
      run: |
        dotnet publish src/FileGuard/FileGuard.csproj \
          -c Release \
          -r osx-x64 \
          --self-contained true \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -o ./publish/osx-x64
          
    - name: Create release archives
      run: |
        cd publish
        
        # Linux
        tar -czf fileguard-${{ needs.calculate-version.outputs.version }}-linux-x64.tar.gz -C linux-x64 .
        
        # Windows
        cd win-x64 && zip -r ../fileguard-${{ needs.calculate-version.outputs.version }}-win-x64.zip . && cd ..
        
        # macOS
        tar -czf fileguard-${{ needs.calculate-version.outputs.version }}-osx-x64.tar.gz -C osx-x64 .
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries
        path: |
          publish/*.tar.gz
          publish/*.zip

  build-and-push-docker:
    needs: calculate-version
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Docker Registry
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        
    - name: Build Docker Image
      run: |
        docker build \
          -t ${{ env.DOCKER_IMAGE }}:latest \
          -t ${{ env.DOCKER_IMAGE }}:${{ needs.calculate-version.outputs.version }} \
          ./src/FileGuard
        
    - name: Push Docker Images
      run: |
        docker push ${{ env.DOCKER_IMAGE }}:latest
        docker push ${{ env.DOCKER_IMAGE }}:${{ needs.calculate-version.outputs.version }}

  create-release: 
    needs: [calculate-version, build-binary, build-and-push-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write 
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-binaries
        path: ./release-files
        
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.calculate-version.outputs.tag }}
        release_name: FileGuard ${{ needs.calculate-version.outputs.version }}
        body: |
          ## FileGuard Release ${{ needs.calculate-version.outputs.version }}
          
          ### Changes
          - Built from commit: ${{ github.sha }}
          - Docker images available:
            - `${{ env.DOCKER_IMAGE }}:latest`
            - `${{ env.DOCKER_IMAGE }}:${{ needs.calculate-version.outputs.version }}`
          
          ### Downloads
          - **Linux x64**: fileguard-${{ needs.calculate-version.outputs.version }}-linux-x64.tar.gz
          - **Windows x64**: fileguard-${{ needs.calculate-version.outputs.version }}-win-x64.zip
          - **macOS x64**: fileguard-${{ needs.calculate-version.outputs.version }}-osx-x64.tar.gz
          
          ### Docker Usage
          ```bash
          docker run -v /path/to/watch:/app/watch ${{ env.DOCKER_IMAGE }}:${{ needs.calculate-version.outputs.version }}
          ```
        draft: false
        prerelease: false
        
    - name: Upload Linux Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/fileguard-${{ needs.calculate-version.outputs.version }}-linux-x64.tar.gz
        asset_name: fileguard-${{ needs.calculate-version.outputs.version }}-linux-x64.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Windows Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/fileguard-${{ needs.calculate-version.outputs.version }}-win-x64.zip
        asset_name: fileguard-${{ needs.calculate-version.outputs.version }}-win-x64.zip
        asset_content_type: application/zip
        
    - name: Upload macOS Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/fileguard-${{ needs.calculate-version.outputs.version }}-osx-x64.tar.gz
        asset_name: fileguard-${{ needs.calculate-version.outputs.version }}-osx-x64.tar.gz
        asset_content_type: application/gzip
